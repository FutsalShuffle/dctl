version: 1
name: example

docker:
  enabled: true
  registry: "" #Для CI/CD

k8:
  enabled: true

deployments:
  db:
    service: true
    replicas: 1
    pvc:
      - name: db-data
        storage: 512Mi
    containers:
      postgres:
        env:
          POSTGRES_DB: dev
          POSTGRES_USER: dev
          POSTGRES_PASSWORD: dev
          PGDATA: "/var/lib/postgresql/data/pgdata"
        pvc:
          - name: db-data
            mountPath: '/var/lib/postgresql/data/pgdata'
  app:
    service: true
    replicas: 2
    ingress:
      enabled: true
      paths:
        - path: "/"
          port: 80
    containers:
      django:
        ports:
          - 8000
        resources:
          limits:
            cpu: 1000m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
          DB_HOST: example-db
      nginx:
        ports:
          - 80
        resources:
          limits:
            cpu: 1000m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi

containers:
  nginx:
    ports:
      - "${HTTP_PORT}:80"
    build:
      context: .
      dockerfile: ./.dctl/containers/nginx/Dockerfile
      args:
        USER_ID: "$USER_ID"
        GROUP_ID: "$GROUP_ID"
    depends_on:
      - postgres
    volumes:
      - ./static:/app/static
      - ./media:/app/media
      - ./.dctl/logs/nginx:/var/log/nginx
    links:
      - django
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV}
    networks:
      default:
        aliases:
          - site.root

  django:
    build:
      context: .
      dockerfile: ./dctl/containers/django/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    volumes:
      - ./static:/app/static
      - ./media:/app/media
      - .:/app
    links:
      - postgres
    restart: unless-stopped
    #    command: gunicorn main.wsgi:application --bind 0.0.0.0:8000
    environment:
      DEBUG: "True"
      DJANGO_DB: postgresql
      POSTGRES_HOST: postgres
      POSTGRES_NAME: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_PORT: 5432

  postgres:
    build:
      context: .
      dockerfile: ./.dctl/containers/postgres/Dockerfile
      args:
        USER_ID: "$USER_ID"
        GROUP_ID: "$GROUP_ID"
    environment:
      TZ: 'Europe/Moscow'
      PGTZ: 'Europe/Moscow'
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./.dctl/data/postgres:/var/lib/postgresql/data
      - ./.dctl/logs/postgres:/var/log/postgresql/
    ports:
      - "5432:5432"
    restart: always

commands:
  db:
    vendor: postgres
    container: postgres
  run:
    container: django
  extra:
    - name: create-admin
      command: docker exec -it example_django python manage.py createsuperuser
    - name: static
      command: docker exec -it example_django python manage.py collectstatic --noinput
    - name: migrate
      command: docker exec -it example_django python manage.py migrate
